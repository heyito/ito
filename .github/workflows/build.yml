name: Build and Release

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: 'The environment to build for'
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
        description: 'The environment to build for'

jobs:
  build:
    runs-on: macos-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Check code formatting
        run: bun format:app

      - name: Check code linting
        run: bun lint:app

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: 'x86_64-apple-darwin,aarch64-apple-darwin'

      - name: Set up environment
        run: |
          echo "VITE_AUTH0_DOMAIN=\"${{ secrets.VITE_AUTH0_DOMAIN }}\"" >> .env
          echo "VITE_AUTH0_CLIENT_ID=\"${{ secrets.VITE_AUTH0_CLIENT_ID }}\"" >> .env
          echo "VITE_AUTH0_AUDIENCE=\"${{ secrets.VITE_AUTH0_AUDIENCE }}\"" >> .env
          echo "VITE_AUTH0_REDIRECT_URI=\"${{ secrets.VITE_AUTH0_REDIRECT_URI }}\"" >> .env
          echo "APPLE_ID=\"${{ secrets.APPLE_ID }}\"" >> .env
          echo "APPLE_TEAM_ID=\"${{ secrets.APPLE_TEAM_ID }}\"" >> .env
          echo "APPLE_APP_SPECIFIC_PASSWORD=\"${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}\"" >> .env
          echo "CSC_LINK=\"release.p12\"" >> .env
          echo "CSC_KEY_PASSWORD=\"${{ secrets.MACOS_CERT_PASSWORD }}\"" >> .env
          echo "GH_TOKEN=\"${{ secrets.GITHUB_TOKEN }}\"" >> .env
          echo "GRPC_BASE_URL=\"${{ vars.GRPC_BASE_URL }}\"" >> .env
          echo "Created .env file:"
          cat .env

      - name: Decode and install certificate
        run: |
          echo "${{ secrets.MACOS_CERT_BASE64 }}" | base64 --decode > release.p12

      - name: Build and package application
        run: ./build-app.sh

      - name: Upload Installer DMG
        uses: actions/upload-artifact@v4
        with:
          name: Ito-Installer
          path: dist/Ito-Installer.dmg
