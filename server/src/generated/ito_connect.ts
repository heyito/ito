// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=.js"
// @generated from file ito.proto (package ito, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AdvancedSettings, AudioChunk, CreateDictionaryItemRequest, CreateInteractionRequest, CreateNoteRequest, DeleteDictionaryItemRequest, DeleteInteractionRequest, DeleteNoteRequest, DeleteUserDataRequest, DictionaryItem, Empty, GetAdvancedSettingsRequest, GetInteractionRequest, GetNoteRequest, Interaction, ListDictionaryItemsRequest, ListDictionaryItemsResponse, ListInteractionsRequest, ListInteractionsResponse, ListNotesRequest, ListNotesResponse, Note, SubmitTimingReportsRequest, SubmitTimingReportsResponse, TranscribeStreamRequest, TranscriptionResponse, UpdateAdvancedSettingsRequest, UpdateDictionaryItemRequest, UpdateInteractionRequest, UpdateNoteRequest } from "./ito_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service ito.ItoService
 */
export const ItoService = {
  typeName: "ito.ItoService",
  methods: {
    /**
     * Streams audio chunks from the client and gets a single response.
     * This is the ideal method for dictation to reduce latency and memory usage.
     *
     * @generated from rpc ito.ItoService.TranscribeStream
     */
    transcribeStream: {
      name: "TranscribeStream",
      I: AudioChunk,
      O: TranscriptionResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Enhanced streaming transcription that accepts configuration data in-stream.
     * Config can be sent before, during, or omitted entirely. Multiple config messages
     * are merged by the server. This allows immediate streaming without waiting for context.
     *
     * @generated from rpc ito.ItoService.TranscribeStreamV2
     */
    transcribeStreamV2: {
      name: "TranscribeStreamV2",
      I: TranscribeStreamRequest,
      O: TranscriptionResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Note Service
     *
     * @generated from rpc ito.ItoService.CreateNote
     */
    createNote: {
      name: "CreateNote",
      I: CreateNoteRequest,
      O: Note,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.GetNote
     */
    getNote: {
      name: "GetNote",
      I: GetNoteRequest,
      O: Note,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.ListNotes
     */
    listNotes: {
      name: "ListNotes",
      I: ListNotesRequest,
      O: ListNotesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.UpdateNote
     */
    updateNote: {
      name: "UpdateNote",
      I: UpdateNoteRequest,
      O: Note,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.DeleteNote
     */
    deleteNote: {
      name: "DeleteNote",
      I: DeleteNoteRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Interaction Service
     *
     * @generated from rpc ito.ItoService.CreateInteraction
     */
    createInteraction: {
      name: "CreateInteraction",
      I: CreateInteractionRequest,
      O: Interaction,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.GetInteraction
     */
    getInteraction: {
      name: "GetInteraction",
      I: GetInteractionRequest,
      O: Interaction,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.ListInteractions
     */
    listInteractions: {
      name: "ListInteractions",
      I: ListInteractionsRequest,
      O: ListInteractionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.UpdateInteraction
     */
    updateInteraction: {
      name: "UpdateInteraction",
      I: UpdateInteractionRequest,
      O: Interaction,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.DeleteInteraction
     */
    deleteInteraction: {
      name: "DeleteInteraction",
      I: DeleteInteractionRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Dictionary Service
     *
     * @generated from rpc ito.ItoService.CreateDictionaryItem
     */
    createDictionaryItem: {
      name: "CreateDictionaryItem",
      I: CreateDictionaryItemRequest,
      O: DictionaryItem,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.ListDictionaryItems
     */
    listDictionaryItems: {
      name: "ListDictionaryItems",
      I: ListDictionaryItemsRequest,
      O: ListDictionaryItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.UpdateDictionaryItem
     */
    updateDictionaryItem: {
      name: "UpdateDictionaryItem",
      I: UpdateDictionaryItemRequest,
      O: DictionaryItem,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.DeleteDictionaryItem
     */
    deleteDictionaryItem: {
      name: "DeleteDictionaryItem",
      I: DeleteDictionaryItemRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * User Data Service
     *
     * @generated from rpc ito.ItoService.DeleteUserData
     */
    deleteUserData: {
      name: "DeleteUserData",
      I: DeleteUserDataRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Advanced Settings Service
     *
     * @generated from rpc ito.ItoService.GetAdvancedSettings
     */
    getAdvancedSettings: {
      name: "GetAdvancedSettings",
      I: GetAdvancedSettingsRequest,
      O: AdvancedSettings,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc ito.ItoService.UpdateAdvancedSettings
     */
    updateAdvancedSettings: {
      name: "UpdateAdvancedSettings",
      I: UpdateAdvancedSettingsRequest,
      O: AdvancedSettings,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service ito.TimingService
 */
export const TimingService = {
  typeName: "ito.TimingService",
  methods: {
    /**
     * Submit timing reports for interaction analytics
     *
     * @generated from rpc ito.TimingService.SubmitTimingReports
     */
    submitTimingReports: {
      name: "SubmitTimingReports",
      I: SubmitTimingReportsRequest,
      O: SubmitTimingReportsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

