// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file ito.proto (package ito, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ito.proto.
 */
export const file_ito: GenFile = /*@__PURE__*/
  fileDesc("CglpdG8ucHJvdG8SA2l0byIrChVUcmFuc2NyaWJlRmlsZVJlcXVlc3QSEgoKYXVkaW9fZGF0YRgBIAEoDCIgCgpBdWRpb0NodW5rEhIKCmF1ZGlvX2RhdGEYASABKAwiKwoVVHJhbnNjcmlwdGlvblJlc3BvbnNlEhIKCnRyYW5zY3JpcHQYASABKAkiFAoSSGVhbHRoQ2hlY2tSZXF1ZXN0IkcKE0hlYWx0aENoZWNrUmVzcG9uc2USDgoGc3RhdHVzGAEgASgJEg8KB3VzZXJfaWQYAiABKAkSDwoHbWVzc2FnZRgDIAEoCTLbAQoKSXRvU2VydmljZRJACgtIZWFsdGhDaGVjaxIXLml0by5IZWFsdGhDaGVja1JlcXVlc3QaGC5pdG8uSGVhbHRoQ2hlY2tSZXNwb25zZRJICg5UcmFuc2NyaWJlRmlsZRIaLml0by5UcmFuc2NyaWJlRmlsZVJlcXVlc3QaGi5pdG8uVHJhbnNjcmlwdGlvblJlc3BvbnNlEkEKEFRyYW5zY3JpYmVTdHJlYW0SDy5pdG8uQXVkaW9DaHVuaxoaLml0by5UcmFuc2NyaXB0aW9uUmVzcG9uc2UoAWIGcHJvdG8z");

/**
 * The request message containing the entire audio file data.
 *
 * @generated from message ito.TranscribeFileRequest
 */
export type TranscribeFileRequest = Message<"ito.TranscribeFileRequest"> & {
  /**
   * The raw audio data.
   *
   * @generated from field: bytes audio_data = 1;
   */
  audioData: Uint8Array;
};

/**
 * Describes the message ito.TranscribeFileRequest.
 * Use `create(TranscribeFileRequestSchema)` to create a new message.
 */
export const TranscribeFileRequestSchema: GenMessage<TranscribeFileRequest> = /*@__PURE__*/
  messageDesc(file_ito, 0);

/**
 * A chunk of audio data for streaming.
 *
 * @generated from message ito.AudioChunk
 */
export type AudioChunk = Message<"ito.AudioChunk"> & {
  /**
   * @generated from field: bytes audio_data = 1;
   */
  audioData: Uint8Array;
};

/**
 * Describes the message ito.AudioChunk.
 * Use `create(AudioChunkSchema)` to create a new message.
 */
export const AudioChunkSchema: GenMessage<AudioChunk> = /*@__PURE__*/
  messageDesc(file_ito, 1);

/**
 * The response message containing the final transcript.
 *
 * @generated from message ito.TranscriptionResponse
 */
export type TranscriptionResponse = Message<"ito.TranscriptionResponse"> & {
  /**
   * @generated from field: string transcript = 1;
   */
  transcript: string;
};

/**
 * Describes the message ito.TranscriptionResponse.
 * Use `create(TranscriptionResponseSchema)` to create a new message.
 */
export const TranscriptionResponseSchema: GenMessage<TranscriptionResponse> = /*@__PURE__*/
  messageDesc(file_ito, 2);

/**
 * Health check request (empty for now)
 *
 * @generated from message ito.HealthCheckRequest
 */
export type HealthCheckRequest = Message<"ito.HealthCheckRequest"> & {
};

/**
 * Describes the message ito.HealthCheckRequest.
 * Use `create(HealthCheckRequestSchema)` to create a new message.
 */
export const HealthCheckRequestSchema: GenMessage<HealthCheckRequest> = /*@__PURE__*/
  messageDesc(file_ito, 3);

/**
 * Health check response
 *
 * @generated from message ito.HealthCheckResponse
 */
export type HealthCheckResponse = Message<"ito.HealthCheckResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message ito.HealthCheckResponse.
 * Use `create(HealthCheckResponseSchema)` to create a new message.
 */
export const HealthCheckResponseSchema: GenMessage<HealthCheckResponse> = /*@__PURE__*/
  messageDesc(file_ito, 4);

/**
 * @generated from service ito.ItoService
 */
export const ItoService: GenService<{
  /**
   * Simple authenticated health check
   *
   * @generated from rpc ito.ItoService.HealthCheck
   */
  healthCheck: {
    methodKind: "unary";
    input: typeof HealthCheckRequestSchema;
    output: typeof HealthCheckResponseSchema;
  },
  /**
   * Method 1: Sends a whole audio file and gets a single response.
   * Good for simple, non-real-time use cases.
   *
   * @generated from rpc ito.ItoService.TranscribeFile
   */
  transcribeFile: {
    methodKind: "unary";
    input: typeof TranscribeFileRequestSchema;
    output: typeof TranscriptionResponseSchema;
  },
  /**
   * Method 2: Streams audio chunks from the client and gets a single response.
   * This is the ideal method for dictation to reduce latency and memory usage.
   *
   * @generated from rpc ito.ItoService.TranscribeStream
   */
  transcribeStream: {
    methodKind: "client_streaming";
    input: typeof AudioChunkSchema;
    output: typeof TranscriptionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_ito, 0);

