# .github/workflows/app-deploy.yml
name: App CI/CD

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: 'The environment to build for'
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
        description: 'The environment to build for'

permissions:
  contents: read
  id-token: write # needed for OIDC

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.1.20'

      - name: Install dependencies
        working-directory: server
        run: bun install

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::287641434880:role/ItoGitHubCiCdRole
          aws-region: us-west-2

      - name: Run migrations
        run: |
          aws lambda invoke \
            --function-name ${{ vars.AWS_STAGE }}-ItoDb-migration \
            --payload '{}' \
            out.json
          cat out.json

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            | docker login \
                --username AWS \
                --password-stdin 287641434880.dkr.ecr.us-west-2.amazonaws.com

      - name: Build & push multi-arch image
        working-directory: server
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64,linux/amd64 \
            --tag 287641434880.dkr.ecr.us-west-2.amazonaws.com/${{ vars.AWS_STAGE }}-ito-server:latest \
            --push .

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ vars.AWS_STAGE }}-ito-cluster \
            --service ${{ vars.AWS_STAGE }}-ito-service \
            --force-new-deployment
