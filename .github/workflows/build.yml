name: Build and Release

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # required for OIDC role assumption

jobs:
  build:
    runs-on: macos-latest
    environment: ${{ github.event.release.target_commitish == 'main' && 'production' || 'develop' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: 'x86_64-apple-darwin,aarch64-apple-darwin'

      - name: Set up environment
        run: |
          echo "VITE_AUTH0_DOMAIN=\"${{ secrets.VITE_AUTH0_DOMAIN }}\"" >> .env
          echo "VITE_AUTH0_CLIENT_ID=\"${{ secrets.VITE_AUTH0_CLIENT_ID }}\"" >> .env
          echo "VITE_AUTH0_AUDIENCE=\"${{ secrets.VITE_AUTH0_AUDIENCE }}\"" >> .env
          echo "VITE_AUTH0_REDIRECT_URI=\"${{ secrets.VITE_AUTH0_REDIRECT_URI }}\"" >> .env
          echo "VITE_AMPLITUDE_API_KEY=\"${{ secrets.VITE_AMPLITUDE_API_KEY }}\"" >> .env
          echo "VITE_GRPC_BASE_URL=\"${{ vars.VITE_GRPC_BASE_URL }}\"" >> .env
          echo "VITE_UPDATER_BUCKET=\"${{ vars.VITE_UPDATER_BUCKET }}\"" >> .env
          echo "APPLE_ID=\"${{ secrets.APPLE_ID }}\"" >> .env
          echo "APPLE_TEAM_ID=\"${{ secrets.APPLE_TEAM_ID }}\"" >> .env
          echo "APPLE_APP_SPECIFIC_PASSWORD=\"${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}\"" >> .env
          echo "CSC_LINK=\"release.p12\"" >> .env
          echo "CSC_KEY_PASSWORD=\"${{ secrets.MACOS_CERT_PASSWORD }}\"" >> .env
          echo "GH_TOKEN=\"${{ secrets.GITHUB_TOKEN }}\"" >> .env
          echo "GRPC_BASE_URL=\"${{ vars.GRPC_BASE_URL }}\"" >> .env
          echo "ITO_VERSION=\"${GITHUB_REF#refs/tags/v}\"" >> .env
          echo "Created .env file:"
          cat .env

      - name: Decode and install certificate
        run: |
          echo "${{ secrets.MACOS_CERT_BASE64 }}" | base64 --decode > release.p12

      - name: Build and package application
        run: ./build-app.sh

      - name: Upload Installer DMG
        uses: actions/upload-artifact@v4
        with:
          name: Ito-Installer
          path: dist/Ito-Installer.dmg

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::287641434880:role/ItoGitHubCiCdRole
          aws-region: us-west-2

      - name: Upload Build Output to S3
        run: |
          echo "Deploying version ${{ github.ref_name }} to S3"

          BUILD_OUTPUT=dist
          BUCKET=s3://${{ vars.AWS_STAGE }}-ito-releases/releases

          echo "Listing existing files in root of releases/"
          aws s3 ls "$BUCKET/" | grep -vE '/$' | awk '{print $4}' > existing_files.txt

          echo "Identifying which files to delete post-upload"

          find $BUILD_OUTPUT -maxdepth 1 \( \
            -name '*.yml' -o \
            -name '*universal-mac.zip' -o \
            -name '*universal-mac.zip.blockmap' -o \
            -name '*.dmg' -o \
            -name '*.dmg.blockmap' \
          \) | xargs -I{} basename {} > uploaded_root_files.txt

          echo "Uploading full dist to versioned folder: $BUCKET/${{ github.ref_name }}/"
          aws s3 cp $BUILD_OUTPUT $BUCKET/${{ github.ref_name }}/ --recursive

          echo "Uploading selected files to root of releases/"
          for FILE in \
            $(find $BUILD_OUTPUT -maxdepth 1 -name '*.yml') \
            $(find $BUILD_OUTPUT -maxdepth 1 -name '*universal-mac.zip') \
            $(find $BUILD_OUTPUT -maxdepth 1 -name '*universal-mac.zip.blockmap') \
            $(find $BUILD_OUTPUT -maxdepth 1 -name '*.dmg') \
            $(find $BUILD_OUTPUT -maxdepth 1 -name '*.dmg.blockmap')
          do
            aws s3 cp "$FILE" $BUCKET/
          done

          # Compare and find stale files (exist in bucket but not in upload list)
          comm -23 <(sort existing_files.txt) <(sort uploaded_root_files.txt) > stale_files.txt

          echo "Stale files identified for deletion:"
          cat stale_files.txt

          # Delete each stale file
          while IFS= read -r file; do
            echo "Deleting stale file: $file"
            aws s3 rm "$BUCKET/$file"
          done < stale_files.txt
      - name: Upload DMG to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        files: |
          dist/Ito-Installer.dmg
